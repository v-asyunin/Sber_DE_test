### 1.
Написать функцию, которая возвращает максимальную прибыль от одной сделки с одной акцией (сначала покупка, потом продажа). Исходные данные — массив 
вчерашних котировок `stock_prices_yesterday` с ценами акций.

*Информация о массиве:*

Индекс равен количеству минут с начала торговой сессии (9:30 утра).
Значение в массиве равно стоимости акции в это время.

Например: если акция в 10:00 утра стоила 20 долларов, то
`stock_prices_yesterday[30] = 20`.

Допустим, имеем некоторые условия:
`stock_prices_yesterday = [10, 7, 5, 8, 11, 9]`

```
profit = get_max_profit(stock_prices_yesterday)
```
вернет 6 (купили за 5, продали за 11)

Массив может быть любым, хоть за весь день. Нужно написать функцию
`get_max_profit` как можно эффективнее — с наименьшими затратами времени
выполнения и памяти.
Дополнительная цель - объяснить решение.

[ответ](https://github.com/v-asyunin/Sber_DE_test/blob/main/Solution.py)

___

### 2.
Провести compatibility check для версий Spark: 3.2.1 и 3.3

Базовая цель - найти потенциальные проблемы несовместимости
Дополнительная цель - предложить WA по решению несовместимостей для прикладных приложений.

[ответ]()

___

### 3.

Прикладная задача про Hadoop

Разверни однонодный Hadoop кластер. Как вариант используй docker образ cloudera.
Положи в hdfs любой .csv файл с данными
Создай в Hive таблицу над файлом из п.2


Результатом будет:
- csv и hql скрипты в GitHub 
- скринкаст с select-ом таблицы из п.3

[ответ]()